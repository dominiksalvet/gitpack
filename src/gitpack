#!/bin/sh

#-------------------------------------------------------------------------------
# Copyright 2019-2022 Dominik Salvet
# https://github.com/dominiksalvet/gitpack
#-------------------------------------------------------------------------------
# This is GitPack, a simple Git-based package manager. It is particularly useful
# for installing scripts across various platforms. This script is all you need
# to have GitPack running. All arguments are processed as GitPack help explains.
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# MAIN FUNCTION
#-------------------------------------------------------------------------------

# $@ - GitPack arguments
main() {
    init_strings &&
    init_config &&
    init_opts &&
    process_args "$@"
}

#-------------------------------------------------------------------------------
# STATIC INITIALIZATION
#-------------------------------------------------------------------------------

init_strings() {
    readonly VERSION=1.1.0 # current GitPack version

    readonly HELP_MESSAGE='USAGE:    gitpack [OPTION...] ACTION URL[=VERSION]...
          gitpack [OPTION...] COMMAND

ACTION:   install    install/update package
          uninstall  uninstall package
          status     get package status

COMMAND:  list   list installed packages
          clean  remove cache
          paths  show file paths
          help   show help
          about  show information

OPTION:   -h/-H  show short/full version hashes
          -f/-n  always/never fetch from remote
          -r     raw URL mode (no HTTPS adjustments)
          -d     ignore installed basename duplicates'

    readonly ABOUT_MESSAGE="GitPack $VERSION
Simple Git-based package manager

Copyright 2019-2022 Dominik Salvet
https://github.com/dominiksalvet/gitpack"
}

init_config() {
    # URL patterns
    readonly BAD_URL_PATTERN='(^$| |(^|/)\.\.?($|/))' # ERE, always rejected
    readonly RAW_URL_PATTERN='^[^/]+:.' # ERE, additional check for raw URLs

    # line patterns of GitPack databases
    readonly DB_DELIM=' ' # internal delimiter for database data
    readonly STATUS_PATTERN='^[^ ]+ [^ ]+$' # ERE, respect database delimiter
    readonly FETCHED_PATTERN='^[^ ]+ [^ ]+$'

    # map remote references to local ones
    readonly ORIGIN_HEAD=refs/remotes/origin/HEAD # remote HEAD reference path
    readonly HEAD_REFSPEC="+HEAD:$ORIGIN_HEAD" # default remote branch
    readonly TAGS_REFSPEC='+refs/tags/*:refs/tags/*' # versions
    readonly HEADS_REFSPEC='+refs/heads/*:refs/heads/*' # branches

    # field column numbers of GitPack databases
    readonly STATUS_COL_URL=1 STATUS_COL_HASH=2
    readonly FETCHED_COL_URL=1 FETCHED_COL_TIME=2
}

init_opts() {
    # global variables
    hash_mode= # short, full
    fetch_mode= # always, never
    raw_url_mode=false
    ignore_duplicates=false
}

#-------------------------------------------------------------------------------
# ARGUMENT PROCESSING
#-------------------------------------------------------------------------------

# $@ - GitPack arguments
process_args() (
    process_opts "$@" &&
    shift "$((OPTIND - 1))" && # shift to an actual subcommand

    case "$1" in
        install | uninstall | status) process_action_args "$@" ;;
        list | clean | paths) run_"$1" ;; # ignore other arguments
        help) echo "$HELP_MESSAGE" ;;
        about) echo "$ABOUT_MESSAGE" ;;
        '') echoh 'E2: no subcommand provided' >&2; return 1 ;;
        *) echoh "E3: invalid subcommand $1" >&2; return 1 ;;
    esac
)

# $@ - GitPack options
process_opts() {
    while getopts :hHfnrd _opt; do
        case "$_opt" in
            h) hash_mode=short ;;
            H) hash_mode=full ;;
            f) fetch_mode=always ;;
            n) fetch_mode=never ;;
            r) raw_url_mode=true ;;
            d) ignore_duplicates=true ;;
            ?) echoh "E13: invalid option -$OPTARG" >&2; return 1 ;;
        esac || return
    done
}

# $1 - action
# $@ - action arguments
process_action_args() (
    action="$1"
    shift && # shift to URL arguments

    if [ "$#" -eq 0 ]; then
        echoh 'E4: no URL provided' >&2; return 1
    fi &&

    init_runtime g e l s f &&
    for url_arg in "$@"; do
        perform_action "$action" "$url_arg" || return
    done
)

# $@ - echo arguments
echoh() {
    echo "$@" &&
    echo "try 'gitpack help' for more information" # print also a hint
}

#-------------------------------------------------------------------------------
# COMMAND PROCESSING
#-------------------------------------------------------------------------------

run_list() (
    init_runtime g e l s &&
    while IFS= read -r record; do
        url="$(status_record_url "$record")" &&
        hash="$(status_record_hash "$record")" &&
        version="$(beautify_hash "$url" "$hash")" &&
        echo "$url $version" || return
    done < "$STATUS_PATH"
)

# $1 - URL
# $2 - hash (optional)
beautify_hash() {
    if [ "$2" ]; then (
        if ! [ "$hash_mode" ] && repo_cd "$1" 2>/dev/null &&
           ref="$(git describe --all --exact-match "$2" 2>/dev/null)"; then
            echo "${ref##*/}" # remove reference path prefix
        elif [ "$hash_mode" = full ]; then
            echo "$2" # return full hash
        else
            echo "$2" | cut -c 1-7 # return short hash
        fi
    ) fi
}

run_clean() (
    init_runtime e l &&
    if ! remove_dir "$CACHE_DIR"; then
        echo 'E5: failed to remove cache directory' >&2; return 1
    fi
)

# $1 - directory path
remove_dir() {
    if ! [ "$1" ]; then
        echo 'E16: cannot remove directory with empty path' >&2; return 1
    elif ! [ -d "$1/" ]; then
        return # already removed, success
    fi

    echo "removing directory $1" >&2 &&
    # do not remove any important directory
    (   cd -- "$1/" && real_path="$(pwd -P)" &&
        test "$PWD" != / && test "$real_path" != / &&
        test "$PWD" != // && test "$real_path" != // &&
        test "$PWD" != "$HOME" && test "$real_path" != "$HOME"
    ) &&

    rm -rf -- "${1:?}/"
}

run_paths() (
    init_runtime e &&
    echo "state-dir $STATE_DIR" &&
    echo "cache-dir $CACHE_DIR" &&
    echo "lock-path $LOCK_PATH"
)

#-------------------------------------------------------------------------------
# DYNAMIC INITIALIZATION
#-------------------------------------------------------------------------------

# $@ - init flags
init_runtime() {
    for _flag in "$@"; do # order matters
        case "$_flag" in
            g) check_git ;;
            e) init_env ;;
            l) init_lock ;;
            s) init_status_db ;;
            f) init_fetched_db ;;
            *) echo "E15: invalid runtime init flag $_flag" >&2; return 1 ;;
        esac || return
    done
}

check_git() {
    if ! command -v git > /dev/null; then
        echo 'E1: missing git command' >&2; return 1
    fi
}

init_env() {
    USER_ID="$(id -u)" &&
    readonly USER_ID &&

    if [ "$USER_ID" -eq 0 ]; then
        readonly ACCESS=global
    else
        readonly ACCESS=local
    fi &&

    SYSTEM="$(uname)" &&
    readonly SYSTEM &&

    init_paths
}

init_lock() {
    # useful when a wrapper of GitPack set up the lock previously
    if [ "$GITPACK_SKIP_LOCK" = true ]; then
        return
    fi

    mkdir -p "$LOCK_DIR/" && # first create a directory for locks
    if mkdir "$LOCK_PATH/" 2>/dev/null; then # acquire lock
        trap exit_action EXIT && # function to call on an exit
        trap exit HUP INT QUIT TERM && # call exit on these signals
        echo "$$" > "$LOCK_PID_PATH"
    else # failed to acquire lock
        _lockfile="$(basename "$LOCK_PATH")"
        _pid="$(cat "$LOCK_PID_PATH")" # may not exist yet, not a problem though
        echo "E17: $_lockfile was acquired by another process $_pid" >&2
        echo 'if the problem persists, try rebooting' >&2
        return 64 # user defined exit code
    fi
}

exit_action() (
    status="$?" # store exit status of last executed command
    rm -f "$LOCK_PID_PATH"
    rmdir "$LOCK_PATH/" # release lock
    return "$status"
)

init_status_db() {
    create_db "$STATUS_PATH" &&
    check_db "$STATUS_PATH" "$STATUS_PATTERN"
}

init_fetched_db() {
    create_db "$FETCHED_PATH" &&
    if ! check_db "$FETCHED_PATH" "$FETCHED_PATTERN"; then
        echo "try 'gitpack clean' to remove cache" >&2; return 1
    fi
}

#-------------------------------------------------------------------------------
# FILE PATHS
#-------------------------------------------------------------------------------

init_paths() {
    # base paths
    case "$SYSTEM" in
        Linux) init_linux_paths ;;
        Darwin) init_macos_paths ;;
        *) init_fallback_paths ;;
    esac

    # derived paths
    readonly STATUS_PATH="$STATE_DIR/status" # database of installed packages
    readonly REPOS_DIR="$CACHE_DIR/repos" # cache for local repositories
    readonly FETCHED_PATH="$CACHE_DIR/fetched" # repositories fetch timestamps
    readonly LOCK_PATH="$LOCK_DIR/gitpack-$USER_ID.lock" # lock is a directory
    readonly LOCK_PID_PATH="$LOCK_PATH/pid" # process ID of the lock holder
}

init_linux_paths() {
    if [ "$ACCESS" = local ]; then # respect XDG
        readonly STATE_DIR="$HOME/.local/share/gitpack"
        readonly CACHE_DIR="$HOME/.cache/gitpack"
    else # respect FHS
        readonly STATE_DIR=/var/lib/gitpack
        readonly CACHE_DIR=/var/cache/gitpack
    fi
    readonly LOCK_DIR=/var/lock # unified storage for locks
}

init_macos_paths() {
    if [ "$ACCESS" = local ]; then
        readonly STATE_DIR="$HOME/.local/share/gitpack"
        readonly CACHE_DIR="$HOME/Library/Caches/gitpack"
    else
        readonly STATE_DIR=/var/lib/gitpack
        readonly CACHE_DIR=/Library/Caches/gitpack
    fi
    readonly LOCK_DIR=/tmp
}

init_fallback_paths() {
    if [ "$ACCESS" = local ]; then
        readonly STATE_DIR="$HOME/.local/share/gitpack"
        readonly CACHE_DIR="$HOME/.cache/gitpack"
    else
        readonly STATE_DIR=/var/lib/gitpack
        readonly CACHE_DIR=/var/cache/gitpack
    fi
    readonly LOCK_DIR=/tmp
}

#-------------------------------------------------------------------------------
# ACTION PROCESSING
#-------------------------------------------------------------------------------

# $1 - action
# $2 - URL argument
perform_action() (
    echo ">>> running $1 for $2" &&
    url="$(url_arg_to_url "$2")" &&
    version="$(url_arg_to_version "$2")" && # may be empty
    check_url "$url" &&

    init_repo "$url" &&
    record="$(get_status_record "$url")" && # get package local information
    src_hash="$(status_record_hash "$record")" &&
    check_src_hash "$url" "$src_hash" && # hash must exist
    tar_hash="$(get_repo_hash "$url" "$version")" &&

    case "$1" in
        install) perform_install "$url" "$src_hash" "$tar_hash" ;;
        uninstall) perform_uninstall "$url" "$src_hash" ;;
        status) perform_status "$url" "$src_hash" "$tar_hash" ;;
    esac
)

# $1 - URL argument
url_arg_to_url() (
    url="${1%=*}" # remove version if any

    if [ "$raw_url_mode" = false ]; then
        url="$(echo "$url" | tr '[:upper:]' '[:lower:]')" &&
        url="$(echo "${url#https://}" | tr -s '/')" &&
        url="$(echo "$url" | sed 's|/$||; s/.git$//; s|/$||')"
    fi &&

    echo "$url"
)

# $1 - URL argument
url_arg_to_version() {
    if [ "${1##*=}" != "$1" ]; then
        echo "${1##*=}" # remove URL and keep version
    fi
}

# $1 - URL
check_url() (
    lineno="$(echo "$1" | wc -l)" &&
    if [ "$lineno" -ne 1 ] || echo "$1" | grep -qE "$BAD_URL_PATTERN"; then
        echo 'E6: unsupported URL delivered' >&2; return 1
    fi &&

    if [ "$raw_url_mode" = true ] &&
       echo "$1" | grep -Eqv "$RAW_URL_PATTERN"; then
        echo 'E23: raw URL must start with scheme (protocol)' >&2; return 1
    fi
)

# $1 - URL
# $2 - source hash (optional)
check_src_hash() {
    if [ "$2" ]; then ( # source hash does not have to exist
        repo_cd "$1" &&
        if ! git rev-parse -q --verify "$2^0" > /dev/null; then
            echo 'E20: commit of installed version does not exist' >&2; return 1
        fi
    ) fi
}

#-------------------------------------------------------------------------------
# REPOSITORY
#-------------------------------------------------------------------------------

# $1 - URL
init_repo() {
    if [ "$fetch_mode" = never ]; then
        if ! [ -d "$(url_to_repo_path "$1")/.git/" ]; then
            echo 'E21: fetch disabled; cannot download repository' >&2
            echo "try running without '-n' option" >&2
            return 1
        fi
    elif ! [ "$fetch_mode" ] && fetched_recently "$1"; then
        echo 'local repository fresh' >&2
    else
        fetch_repo "$1" "$(url_to_repo_path "$1")" &&
        mark_as_fetched_now "$1"
    fi
}

# $1 - URL
url_to_repo_path() {
    echo "$REPOS_DIR/$1" # assume it will not fail (just like any other echo)
}

# $1 - URL
# $2 - repository directory
fetch_repo() (
    mkdir -p -- "$2/" && # make sure directory for repository is created
    cd -- "$2/" &&

    if [ -d .git/ ]; then # current directory is repository
        echo 'updating local repository' >&2
    else # initialize and configure repository
        echo 'downloading repository' >&2 &&
        git init -q &&
        git config gc.auto 0 && # disable garbage collector
        git config remote.origin.fetch "$HEAD_REFSPEC" &&
        git config --add remote.origin.fetch "$TAGS_REFSPEC" &&
        git config --add remote.origin.fetch "$HEADS_REFSPEC" &&
        git config remote.origin.url "$(url_to_git_url "$1")"
    fi &&

    # fetch remote updates (prune, do not fetch tags implicitly, update HEAD)
    git fetch -pnuq origin
)

# $1 - URL
url_to_git_url() {
    if [ "$raw_url_mode" = true ]; then
        echo "$1"
    else
        echo "https://$1.git"
    fi
}

# $1 - URL
# $2 - version (optional)
get_repo_hash() (
    repo_cd "$1" &&
    if [ "$2" = HEAD ]; then # HEAD reference must point to remote HEAD
        set -- "$1" "$ORIGIN_HEAD"
    fi &&

    if [ "$2" ]; then
        echo 'using custom candidate version' >&2 &&
        # print the commit hash of the version if it is a valid Git reference
        if ! git rev-parse -q --verify "$2^0"; then
            echo "E8: repository does not have version $2" >&2; return 1
        fi
    else # use latest tag (preferred) or latest commit of default branch
        echo 'using automatic candidate version' >&2 &&
        ref="$(git describe --tags --abbrev=0 --always "$ORIGIN_HEAD")" &&
        git rev-parse --verify "$ref^0" # get commit hash
    fi
)

# $1 - URL
# $2 - hash (optional)
repo_cd() {
    if ! [ "$1" ]; then # just for sure
        echo 'E18: cannot change directory to an empty URL' >&2; return 1
    fi

    cd "$(url_to_repo_path "$1")/" &&
    if [ "$2" ]; then
        git checkout -qf "$2"
    fi
}

#-------------------------------------------------------------------------------
# EXECUTE ACTION
#-------------------------------------------------------------------------------

# $1 - URL
# $2 - source hash (optional)
# $3 - target hash
perform_install() {
    if ! [ "$2" ]; then # not installed yet
        run_install "$1" "$3" &&
        insert_status_record "$1" "$3" &&
        echo '<<< done; successfully installed'
    elif [ "$2" = "$3" ]; then
        echo '<<< already installed'
    else
        perform_change "$1" "$2" "$3"
    fi
}

# $1 - URL
# $2 - source hash
# $3 - target hash
perform_change() (
    if is_ancestor_commit "$1" "$2" "$3"; then # source version is older
        echo 'updating package' >&2 &&
        report='<<< done; successfully updated'
    elif is_ancestor_commit "$1" "$3" "$2"; then # source version is newer
        echo 'downgrading package' >&2 &&
        report='<<< done; successfully downgraded'
    else # given versions are not comparable
        echo 'changing package version' >&2 &&
        report='<<< done; successfully changed'
    fi &&

    run_uninstall "$1" "$2" &&
    delete_status_records "$1" &&
    run_install "$1" "$3" &&
    insert_status_record "$1" "$3" &&
    echo "$report"
)

# $1 - URL
# $2 - source hash (optional)
perform_uninstall() {
    if [ "$2" ]; then # if installed
        run_uninstall "$1" "$2" &&
        delete_status_records "$1" &&
        echo '<<< done; successfully uninstalled'
    else
        echo '<<< already uninstalled'
    fi
}

# $1 - URL
# $2 - source hash (optional)
# $3 - target hash
perform_status() (
    src_version="$(beautify_hash "$1" "$2")" && # success even when empty
    tar_version="$(beautify_hash "$1" "$3")" &&

    if ! [ "$2" ]; then # no source version
        echo "<<< not installed; candidate is $tar_version"
    elif [ "$2" = "$3" ]; then # given versions are equal
        echo "<<< candidate $tar_version already installed"
    elif is_ancestor_commit "$1" "$2" "$3"; then # source version is older
        echo "<<< installed $src_version is older than candidate $tar_version"
    elif is_ancestor_commit "$1" "$3" "$2"; then # source version is newer
        echo "<<< installed $src_version is newer than candidate $tar_version"
    else # given versions are not comparable
        echo "<<< installed $src_version differs from candidate $tar_version"
    fi
)

# $1 - URL
# $2 - first hash
# $3 - second hash
is_ancestor_commit() (
    repo_cd "$1" &&
    git merge-base --is-ancestor "$2" "$3"
)

#-------------------------------------------------------------------------------
# INSTALLATION AND UNINSTALLATION
#-------------------------------------------------------------------------------

# $1 - URL
# $2 - hash
run_install() (
    version="$(beautify_hash "$1" "$2")" &&
    echo "installing version $version" >&2 &&

    repo_cd "$1" "$2" &&
    install_script="$(get_install_script)" &&
    get_uninstall_script > /dev/null && # GitPack must be able to uninstall it
    run_script "$install_script"
)

get_install_script() {
    if [ -x .install/install-"${ACCESS}-$SYSTEM" ]; then
        echo .install/install-"${ACCESS}-$SYSTEM"
    elif [ -x .install/install-"$ACCESS" ]; then
        echo .install/install-"$ACCESS"
    else
        echo "E9: missing script for $ACCESS installation on $SYSTEM" >&2
        echo 'repository developer may help' >&2
        return 1
    fi
}

# $1 - URL
# $2 - hash
run_uninstall() (
    version="$(beautify_hash "$1" "$2")" &&
    echo "uninstalling version $version" >&2 &&

    repo_cd "$1" "$2" &&
    uninstall_script="$(get_uninstall_script)" &&
    run_script "$uninstall_script"
)

get_uninstall_script() {
    if [ -x .install/uninstall-"${ACCESS}-$SYSTEM" ]; then
        echo .install/uninstall-"${ACCESS}-$SYSTEM"
    elif [ -x .install/uninstall-"$ACCESS" ]; then
        echo .install/uninstall-"$ACCESS"
    else
        echo "E10: missing script for $ACCESS uninstallation on $SYSTEM" >&2
        return 1
    fi
}

# $1 - script path
run_script() (
    echo "running script $1" >&2 &&
    "$1" 1>&2 && return # return if success, stdout considered diagnostic output

    script_status="$?"
    script_name="$(basename -- "$1")"
    echo "E11: $script_name script failed with $script_status" >&2
    return 1 # indicate error but do not propagate the exit status further
)

#-------------------------------------------------------------------------------
# STATUS DATABASE
#-------------------------------------------------------------------------------

# $1 - URL
get_status_record() (
    echo 'reading status database' >&2 &&
    record="$(db_select_first "$STATUS_PATH" "$STATUS_COL_URL" "$1")" &&

    if [ "$record" ]; then # if installed
        echo "$record"
    elif [ "$ignore_duplicates" = false ]; then
        url_basename="$(get_url_basename "$1")" &&
        # check if package with the same basename is installed
        if ! is_url_basename_unique "$url_basename"; then
            echo "E22: $url_basename was installed using different URL" >&2
            echo "if this is mistake, try '-d' option" >&2
            return 1
        fi
    fi
)

# $1 - URL basename
is_url_basename_unique() (
    while IFS= read -r record; do
        url="$(status_record_url "$record")" &&
        url_basename="$(get_url_basename "$url")" &&
        if [ "$url_basename" = "$1" ]; then
            return 1 # it is not unique
        fi || return
    done < "$STATUS_PATH"
)

# $1 - URL
get_url_basename() (
    url_basename="$(echo "$1" | sed 's|/*$||; s|/*.git$||')" &&
    echo "${url_basename##*/}" | tr '[:upper:]' '[:lower:]'
)

# $1 - URL
# $2 - hash
insert_status_record() {
    echo 'adding to status database' >&2 &&
    cp "$STATUS_PATH" "$STATUS_PATH.tmp" &&
    echo "$1 $2" >> "$STATUS_PATH.tmp" &&
    mv "$STATUS_PATH.tmp" "$STATUS_PATH" # should be signal-safe
}

# $1 - URL
delete_status_records() (
    echo 'removing from status database' >&2 &&
    db="$(db_select_except "$STATUS_PATH" "$STATUS_COL_URL" "$1")" &&
    echon "$db" > "$STATUS_PATH.tmp" &&
    mv "$STATUS_PATH.tmp" "$STATUS_PATH"
)

# $@ - echo arguments
echon() {
    # no newline if empty string
    if [ "$*" ]; then
        echo "$@"
    fi
}

# $1 - status record
status_record_url() {
    echo "$1" | cut -f "$STATUS_COL_URL" -d "$DB_DELIM" -s
}

# $1 - status record
status_record_hash() {
    echo "$1" | cut -f "$STATUS_COL_HASH" -d "$DB_DELIM" -s
}

#-------------------------------------------------------------------------------
# FETCHED DATABASE
#-------------------------------------------------------------------------------

# $1 - URL
fetched_recently() (
    current_time="$(get_current_time)" &&
    record="$(db_select_first "$FETCHED_PATH" "$FETCHED_COL_URL" "$1")" &&
    record_time="$(fetched_record_time "$record")" &&
    test "$record_time" = "$current_time"
)

# $1 - URL
mark_as_fetched_now() (
    current_time="$(get_current_time)" &&
    db="$(db_select_except "$FETCHED_PATH" "$FETCHED_COL_URL" "$1")" &&
    db="$(db_append_record "$db" "$1 $current_time")" &&
    echo "$db" > "$FETCHED_PATH.tmp" &&
    mv "$FETCHED_PATH.tmp" "$FETCHED_PATH"
)

get_current_time() {
    date -u '+%Y%m%d%H' # UTC as <year><month><day><hour>
}

# $1 - fetched record
fetched_record_time() {
    echo "$1" | cut -f "$FETCHED_COL_TIME" -d "$DB_DELIM" -s
}

#-------------------------------------------------------------------------------
# DATABASE FUNCTIONS
#-------------------------------------------------------------------------------

# $1 - database path
create_db() (
    db_dir="$(dirname -- "$1")" &&
    mkdir -p -- "$db_dir/" &&

    if ! [ -e "$1" ]; then # if database does not exist
        touch -- "$1" # create it
    fi &&

    if ! [ -r "$1" ] || ! [ -w "$1" ]; then
        db_name="$(basename -- "$1")"
        echo "E14: cannot access $db_name database" >&2
        return 1
    fi
)

# $1 - database path
# $2 - database pattern
check_db() {
    if grep -Eqv -- "$2" "$1"; then ( # if a record does not match the pattern
        db_name="$(basename -- "$1")"
        echo "E19: database $db_name is corrupted" >&2
        return 1
    ) fi
}

# $1 - database path
# $2 - key column
# $3 - expected value
db_select_first() (
    while IFS= read -r record; do
        item="$(echo "$record" | cut -f "$2" -d "$DB_DELIM" -s)" || return
        if [ "$item" = "$3" ]; then
            echo "$record"; return
        fi
    done < "$1"
)

# $1 - database path
# $2 - key column
# $3 - filtered value
db_select_except() (
    while IFS= read -r record; do
        item="$(echo "$record" | cut -f "$2" -d "$DB_DELIM" -s)" || return
        if [ "$item" != "$3" ]; then
            echo "$record"
        fi
    done < "$1"
)

# $1 - database
# $2 - record
db_append_record() {
    if [ "$1" ]; then
        echo "$1
$2"
    else
        echo "$2"
    fi
}

#-------------------------------------------------------------------------------
# CALL MAIN
#-------------------------------------------------------------------------------

main "$@"
